buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'antlr'

version = "${versionNum}.${majorBuildNum}.${minorBuildNum}"
group = 'com.sonicandtailscd.roboticraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'Roboticraft'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    shade
    compile.extendsFrom shade
}
dependencies {
    compile "com.github.DomAmato:rabbit-gui:master-SNAPSHOT"
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    shade group: "org.java-websocket", name: "Java-WebSocket", version: "1.3.0"
    antlr "org.antlr:antlr4:4.5.3"
    shade "org.antlr:antlr4-runtime:4.5.3"

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    configurations.shade.each{  dep ->
        from(project.zipTree(dep)) {
            exclude "META-ING", "META-INF/**", "../.Trash-1000", "**/LICENSE"
        }
    }
    manifest {
        attributes([
            "Specification-Title": "Roboticraft",
            "Specification-Vendor": "SonicandTailsCD",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"SonicandTailsCD",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

task incrementVersion {
    ant.propertyfile(file: "gradle.properties") {
        if (entry(key: "minorBuildNum", type: "int") == 9) {
            entry(key: "minorBuildNum", type: "int", operation: "-9")
            entry(key: "majorBuildNum", type: "int", operation: "+")
        }
        if (entry(key: "majorBuildNum", type: "int") == 9) {
            entry(key: "versionBuildNum", type: "int", default: "0", operation: "+")
        }
    }
}

tasks.build.mustRunAfter incrementVersion